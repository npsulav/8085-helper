/// Generated by Flutter GetX Starter on 2022-04-03 18:59
import 'package:a_8085_helper/assembler/assembler.dart';
import 'package:a_8085_helper/res/app_colors.dart';
import 'package:a_8085_helper/views/output_view/output_view_view.dart';
import 'package:creamy_field/creamy_field.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import 'assembler_screen_logic.dart';

class AssemblerScreenView extends StatefulWidget {
  const AssemblerScreenView({Key? key}) : super(key: key);

  @override
  State<AssemblerScreenView> createState() => _AssemblerScreenViewState();
}

class _AssemblerScreenViewState extends State<AssemblerScreenView> {
  final AssemblerScreenLogic logic = Get.put(AssemblerScreenLogic());
  Assembler assembler = Assembler();

  late CreamyEditingController controller;
  late CreamyEditingController controller2;

  late ScrollController scrollController;
  late ScrollController scrollController2;

  final PageController pageController = PageController();

  int pageIndex = 0;

  @override
  void initState() {
    super.initState();
    // The below example shows [CreamyEditingController], a text editing controller with RichText highlighting support
    controller = CreamyEditingController(
      // This is the CreamySyntaxHighlighter which will be used by the controller
      // to generate list of RichText for syntax highlighting
      syntaxHighlighter: CreamySyntaxHighlighter(
        language: LanguageType.x86asm,
        theme: HighlightedThemeType.githubTheme,
      ),
      // The number of spaces which will replace `\t`.
      // Setting this to 1 does nothing & setting this to value less than 1
      // throws assertion error.
      tabSize: 4,
    );
    controller2 = CreamyEditingController(
      // This is the CreamySyntaxHighlighter which will be used by the controller
      // to generate list of RichText for syntax highlighting
      syntaxHighlighter: CreamySyntaxHighlighter(
        language: LanguageType.x86asm,
        theme: HighlightedThemeType.githubTheme,
      ),
      // The number of spaces which will replace `\t`.
      // Setting this to 1 does nothing & setting this to value less than 1
      // throws assertion error.
      tabSize: 4,
    );
    scrollController2 = ScrollController();
    scrollController = ScrollController();
  }

  @override
  void dispose() {
    controller.dispose();
    scrollController.dispose();
    controller2.dispose();
    scrollController2.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            if (pageIndex == 0) {
              pageIndex = 1;
             printInfo(info: controller.text);
              controller2.text = assembler.multiLineInterpret(code:controller.text).toString();
            } else {
              pageIndex = 0;
            }
          });

          pageController.jumpToPage(pageIndex);
        },
        child: Icon((pageIndex == 0) ? CupertinoIcons.play_arrow : Icons.edit),
      ),
      appBar: AppBar(
        title: const Text("8085 Code Assembler"),
      ),
      body: Column(
        children: [
          Expanded(
            child: PageView(
              physics: const NeverScrollableScrollPhysics(),
              controller: pageController,
              children: [
                LineCountIndicator(
                  textControllerOfTextField: controller,
                  scrollControllerOfTextField: scrollController,
                  decoration: LineCountIndicatorDecoration(
                      backgroundColor: Colors.grey,
                      rightBorderSide:
                          const BorderSide(color: AppColors.primary)),
                  // Allow this Text field to be horizontally scrollable
                  child: HorizontalScrollable(
                    // Additional options for text selection widget
                    child: Padding(
                      padding: const EdgeInsets.only(left: 8.0),
                      child: TextField(
                        autofocus: true,
                        // Our controller should be up casted as CreamyEditingController
                        // Note: Declare controller as CreamyEditingController if this fails.
                        controller: controller,
                        scrollController: scrollController,
                        textCapitalization: TextCapitalization.none,
                        decoration: const InputDecoration.collapsed(
                            hintText: 'Write .asm codes here'),
                        maxLines: null,
                      ),
                    ),
                  ),
                ),
                LineCountIndicator(
                  textControllerOfTextField: controller2,
                  scrollControllerOfTextField: scrollController2,
                  decoration: LineCountIndicatorDecoration(
                      backgroundColor: Colors.grey,
                      rightBorderSide:
                      const BorderSide(color: AppColors.primary)),
                  // Allow this Text field to be horizontally scrollable
                  child: HorizontalScrollable(
                    // Additional options for text selection widget
                    child: Padding(
                      padding: const EdgeInsets.only(left: 8.0),
                      child: TextField(
                        autofocus: true,
                        // Our controller should be up casted as CreamyEditingController
                        // Note: Declare controller as CreamyEditingController if this fails.
                        controller: controller2,
                        scrollController: scrollController2,
                        textCapitalization: TextCapitalization.none,
                        decoration: const InputDecoration.collapsed(
                            hintText: '.asm codes output opcodes'),
                        maxLines: null,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          )
        ],
      ),
    );
  }
}
